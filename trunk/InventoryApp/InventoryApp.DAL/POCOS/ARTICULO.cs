//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InventoryApp.DAL.POCOS
{
    public partial class ARTICULO
    {
        #region Primitive Properties
    
        public virtual long UNID_ARTICULO
        {
            get;
            set;
        }
    
        public virtual string ARTICULO1
        {
            get;
            set;
        }
    
        public virtual long UNID_CATEGORIA
        {
            get { return _uNID_CATEGORIA; }
            set
            {
                if (_uNID_CATEGORIA != value)
                {
                    if (CATEGORIA != null && CATEGORIA.UNID_CATEGORIA != value)
                    {
                        CATEGORIA = null;
                    }
                    _uNID_CATEGORIA = value;
                }
            }
        }
        private long _uNID_CATEGORIA;
    
        public virtual long UNID_EQUIPO
        {
            get { return _uNID_EQUIPO; }
            set
            {
                if (_uNID_EQUIPO != value)
                {
                    if (EQUIPO != null && EQUIPO.UNID_EQUIPO != value)
                    {
                        EQUIPO = null;
                    }
                    _uNID_EQUIPO = value;
                }
            }
        }
        private long _uNID_EQUIPO;
    
        public virtual long UNID_MARCA
        {
            get { return _uNID_MARCA; }
            set
            {
                if (_uNID_MARCA != value)
                {
                    if (MARCA != null && MARCA.UNID_MARCA != value)
                    {
                        MARCA = null;
                    }
                    _uNID_MARCA = value;
                }
            }
        }
        private long _uNID_MARCA;
    
        public virtual long UNID_MODELO
        {
            get { return _uNID_MODELO; }
            set
            {
                if (_uNID_MODELO != value)
                {
                    if (MODELO != null && MODELO.UNID_MODELO != value)
                    {
                        MODELO = null;
                    }
                    _uNID_MODELO = value;
                }
            }
        }
        private long _uNID_MODELO;
    
        public virtual bool IS_ACTIVE
        {
            get;
            set;
        }
    
        public virtual bool IS_MODIFIED
        {
            get;
            set;
        }
    
        public virtual long LAST_MODIFIED_DATE
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<MASTER_INVENTARIOS> MASTER_INVENTARIOS
        {
            get
            {
                if (_mASTER_INVENTARIOS == null)
                {
                    var newCollection = new FixupCollection<MASTER_INVENTARIOS>();
                    newCollection.CollectionChanged += FixupMASTER_INVENTARIOS;
                    _mASTER_INVENTARIOS = newCollection;
                }
                return _mASTER_INVENTARIOS;
            }
            set
            {
                if (!ReferenceEquals(_mASTER_INVENTARIOS, value))
                {
                    var previousValue = _mASTER_INVENTARIOS as FixupCollection<MASTER_INVENTARIOS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMASTER_INVENTARIOS;
                    }
                    _mASTER_INVENTARIOS = value;
                    var newValue = value as FixupCollection<MASTER_INVENTARIOS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMASTER_INVENTARIOS;
                    }
                }
            }
        }
        private ICollection<MASTER_INVENTARIOS> _mASTER_INVENTARIOS;
    
        public virtual ICollection<ITEM> ITEMs
        {
            get
            {
                if (_iTEMs == null)
                {
                    var newCollection = new FixupCollection<ITEM>();
                    newCollection.CollectionChanged += FixupITEMs;
                    _iTEMs = newCollection;
                }
                return _iTEMs;
            }
            set
            {
                if (!ReferenceEquals(_iTEMs, value))
                {
                    var previousValue = _iTEMs as FixupCollection<ITEM>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupITEMs;
                    }
                    _iTEMs = value;
                    var newValue = value as FixupCollection<ITEM>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupITEMs;
                    }
                }
            }
        }
        private ICollection<ITEM> _iTEMs;
    
        public virtual ICollection<FACTURA_DETALLE> FACTURA_DETALLE
        {
            get
            {
                if (_fACTURA_DETALLE == null)
                {
                    var newCollection = new FixupCollection<FACTURA_DETALLE>();
                    newCollection.CollectionChanged += FixupFACTURA_DETALLE;
                    _fACTURA_DETALLE = newCollection;
                }
                return _fACTURA_DETALLE;
            }
            set
            {
                if (!ReferenceEquals(_fACTURA_DETALLE, value))
                {
                    var previousValue = _fACTURA_DETALLE as FixupCollection<FACTURA_DETALLE>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFACTURA_DETALLE;
                    }
                    _fACTURA_DETALLE = value;
                    var newValue = value as FixupCollection<FACTURA_DETALLE>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFACTURA_DETALLE;
                    }
                }
            }
        }
        private ICollection<FACTURA_DETALLE> _fACTURA_DETALLE;
    
        public virtual ICollection<POM_ARTICULO> POM_ARTICULO
        {
            get
            {
                if (_pOM_ARTICULO == null)
                {
                    var newCollection = new FixupCollection<POM_ARTICULO>();
                    newCollection.CollectionChanged += FixupPOM_ARTICULO;
                    _pOM_ARTICULO = newCollection;
                }
                return _pOM_ARTICULO;
            }
            set
            {
                if (!ReferenceEquals(_pOM_ARTICULO, value))
                {
                    var previousValue = _pOM_ARTICULO as FixupCollection<POM_ARTICULO>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPOM_ARTICULO;
                    }
                    _pOM_ARTICULO = value;
                    var newValue = value as FixupCollection<POM_ARTICULO>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPOM_ARTICULO;
                    }
                }
            }
        }
        private ICollection<POM_ARTICULO> _pOM_ARTICULO;
    
        public virtual CATEGORIA CATEGORIA
        {
            get { return _cATEGORIA; }
            set
            {
                if (!ReferenceEquals(_cATEGORIA, value))
                {
                    var previousValue = _cATEGORIA;
                    _cATEGORIA = value;
                    FixupCATEGORIA(previousValue);
                }
            }
        }
        private CATEGORIA _cATEGORIA;
    
        public virtual EQUIPO EQUIPO
        {
            get { return _eQUIPO; }
            set
            {
                if (!ReferenceEquals(_eQUIPO, value))
                {
                    var previousValue = _eQUIPO;
                    _eQUIPO = value;
                    FixupEQUIPO(previousValue);
                }
            }
        }
        private EQUIPO _eQUIPO;
    
        public virtual MARCA MARCA
        {
            get { return _mARCA; }
            set
            {
                if (!ReferenceEquals(_mARCA, value))
                {
                    var previousValue = _mARCA;
                    _mARCA = value;
                    FixupMARCA(previousValue);
                }
            }
        }
        private MARCA _mARCA;
    
        public virtual MODELO MODELO
        {
            get { return _mODELO; }
            set
            {
                if (!ReferenceEquals(_mODELO, value))
                {
                    var previousValue = _mODELO;
                    _mODELO = value;
                    FixupMODELO(previousValue);
                }
            }
        }
        private MODELO _mODELO;
    
        public virtual ICollection<MAX_MIN> MAX_MIN
        {
            get
            {
                if (_mAX_MIN == null)
                {
                    var newCollection = new FixupCollection<MAX_MIN>();
                    newCollection.CollectionChanged += FixupMAX_MIN;
                    _mAX_MIN = newCollection;
                }
                return _mAX_MIN;
            }
            set
            {
                if (!ReferenceEquals(_mAX_MIN, value))
                {
                    var previousValue = _mAX_MIN as FixupCollection<MAX_MIN>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMAX_MIN;
                    }
                    _mAX_MIN = value;
                    var newValue = value as FixupCollection<MAX_MIN>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMAX_MIN;
                    }
                }
            }
        }
        private ICollection<MAX_MIN> _mAX_MIN;
    
        public virtual ICollection<PROGRAMADO> PROGRAMADOes
        {
            get
            {
                if (_pROGRAMADOes == null)
                {
                    var newCollection = new FixupCollection<PROGRAMADO>();
                    newCollection.CollectionChanged += FixupPROGRAMADOes;
                    _pROGRAMADOes = newCollection;
                }
                return _pROGRAMADOes;
            }
            set
            {
                if (!ReferenceEquals(_pROGRAMADOes, value))
                {
                    var previousValue = _pROGRAMADOes as FixupCollection<PROGRAMADO>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPROGRAMADOes;
                    }
                    _pROGRAMADOes = value;
                    var newValue = value as FixupCollection<PROGRAMADO>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPROGRAMADOes;
                    }
                }
            }
        }
        private ICollection<PROGRAMADO> _pROGRAMADOes;

        #endregion
        #region Association Fixup
    
        private void FixupCATEGORIA(CATEGORIA previousValue)
        {
            if (previousValue != null && previousValue.ARTICULOes.Contains(this))
            {
                previousValue.ARTICULOes.Remove(this);
            }
    
            if (CATEGORIA != null)
            {
                if (!CATEGORIA.ARTICULOes.Contains(this))
                {
                    CATEGORIA.ARTICULOes.Add(this);
                }
                if (UNID_CATEGORIA != CATEGORIA.UNID_CATEGORIA)
                {
                    UNID_CATEGORIA = CATEGORIA.UNID_CATEGORIA;
                }
            }
        }
    
        private void FixupEQUIPO(EQUIPO previousValue)
        {
            if (previousValue != null && previousValue.ARTICULOes.Contains(this))
            {
                previousValue.ARTICULOes.Remove(this);
            }
    
            if (EQUIPO != null)
            {
                if (!EQUIPO.ARTICULOes.Contains(this))
                {
                    EQUIPO.ARTICULOes.Add(this);
                }
                if (UNID_EQUIPO != EQUIPO.UNID_EQUIPO)
                {
                    UNID_EQUIPO = EQUIPO.UNID_EQUIPO;
                }
            }
        }
    
        private void FixupMARCA(MARCA previousValue)
        {
            if (previousValue != null && previousValue.ARTICULOes.Contains(this))
            {
                previousValue.ARTICULOes.Remove(this);
            }
    
            if (MARCA != null)
            {
                if (!MARCA.ARTICULOes.Contains(this))
                {
                    MARCA.ARTICULOes.Add(this);
                }
                if (UNID_MARCA != MARCA.UNID_MARCA)
                {
                    UNID_MARCA = MARCA.UNID_MARCA;
                }
            }
        }
    
        private void FixupMODELO(MODELO previousValue)
        {
            if (previousValue != null && previousValue.ARTICULOes.Contains(this))
            {
                previousValue.ARTICULOes.Remove(this);
            }
    
            if (MODELO != null)
            {
                if (!MODELO.ARTICULOes.Contains(this))
                {
                    MODELO.ARTICULOes.Add(this);
                }
                if (UNID_MODELO != MODELO.UNID_MODELO)
                {
                    UNID_MODELO = MODELO.UNID_MODELO;
                }
            }
        }
    
        private void FixupMASTER_INVENTARIOS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MASTER_INVENTARIOS item in e.NewItems)
                {
                    item.ARTICULO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MASTER_INVENTARIOS item in e.OldItems)
                {
                    if (ReferenceEquals(item.ARTICULO, this))
                    {
                        item.ARTICULO = null;
                    }
                }
            }
        }
    
        private void FixupITEMs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ITEM item in e.NewItems)
                {
                    item.ARTICULO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM item in e.OldItems)
                {
                    if (ReferenceEquals(item.ARTICULO, this))
                    {
                        item.ARTICULO = null;
                    }
                }
            }
        }
    
        private void FixupFACTURA_DETALLE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FACTURA_DETALLE item in e.NewItems)
                {
                    item.ARTICULO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FACTURA_DETALLE item in e.OldItems)
                {
                    if (ReferenceEquals(item.ARTICULO, this))
                    {
                        item.ARTICULO = null;
                    }
                }
            }
        }
    
        private void FixupPOM_ARTICULO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (POM_ARTICULO item in e.NewItems)
                {
                    item.ARTICULO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (POM_ARTICULO item in e.OldItems)
                {
                    if (ReferenceEquals(item.ARTICULO, this))
                    {
                        item.ARTICULO = null;
                    }
                }
            }
        }
    
        private void FixupMAX_MIN(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MAX_MIN item in e.NewItems)
                {
                    item.ARTICULO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MAX_MIN item in e.OldItems)
                {
                    if (ReferenceEquals(item.ARTICULO, this))
                    {
                        item.ARTICULO = null;
                    }
                }
            }
        }
    
        private void FixupPROGRAMADOes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PROGRAMADO item in e.NewItems)
                {
                    item.ARTICULO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PROGRAMADO item in e.OldItems)
                {
                    if (ReferenceEquals(item.ARTICULO, this))
                    {
                        item.ARTICULO = null;
                    }
                }
            }
        }

        #endregion
    }
}
