//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InventoryApp.DAL.POCOS
{
    public partial class ALMACEN
    {
        #region Primitive Properties
    
        public virtual long UNID_ALMACEN
        {
            get;
            set;
        }
    
        public virtual string ALMACEN_NAME
        {
            get;
            set;
        }
    
        public virtual string CONTACTO
        {
            get;
            set;
        }
    
        public virtual string TECNICO
        {
            get;
            set;
        }
    
        public virtual string DIRECCION
        {
            get;
            set;
        }
    
        public virtual long UNID_CIUDAD
        {
            get { return _uNID_CIUDAD; }
            set
            {
                if (_uNID_CIUDAD != value)
                {
                    if (CIUDAD != null && CIUDAD.UNID_CIUDAD != value)
                    {
                        CIUDAD = null;
                    }
                    _uNID_CIUDAD = value;
                }
            }
        }
        private long _uNID_CIUDAD;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ALMACEN_EMAIL> ALMACEN_EMAIL
        {
            get
            {
                if (_aLMACEN_EMAIL == null)
                {
                    var newCollection = new FixupCollection<ALMACEN_EMAIL>();
                    newCollection.CollectionChanged += FixupALMACEN_EMAIL;
                    _aLMACEN_EMAIL = newCollection;
                }
                return _aLMACEN_EMAIL;
            }
            set
            {
                if (!ReferenceEquals(_aLMACEN_EMAIL, value))
                {
                    var previousValue = _aLMACEN_EMAIL as FixupCollection<ALMACEN_EMAIL>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupALMACEN_EMAIL;
                    }
                    _aLMACEN_EMAIL = value;
                    var newValue = value as FixupCollection<ALMACEN_EMAIL>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupALMACEN_EMAIL;
                    }
                }
            }
        }
        private ICollection<ALMACEN_EMAIL> _aLMACEN_EMAIL;
    
        public virtual ICollection<MOVIMENTO> MOVIMENTOes
        {
            get
            {
                if (_mOVIMENTOes == null)
                {
                    var newCollection = new FixupCollection<MOVIMENTO>();
                    newCollection.CollectionChanged += FixupMOVIMENTOes;
                    _mOVIMENTOes = newCollection;
                }
                return _mOVIMENTOes;
            }
            set
            {
                if (!ReferenceEquals(_mOVIMENTOes, value))
                {
                    var previousValue = _mOVIMENTOes as FixupCollection<MOVIMENTO>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMOVIMENTOes;
                    }
                    _mOVIMENTOes = value;
                    var newValue = value as FixupCollection<MOVIMENTO>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMOVIMENTOes;
                    }
                }
            }
        }
        private ICollection<MOVIMENTO> _mOVIMENTOes;
    
        public virtual ICollection<MOVIMENTO> MOVIMENTOes1
        {
            get
            {
                if (_mOVIMENTOes1 == null)
                {
                    var newCollection = new FixupCollection<MOVIMENTO>();
                    newCollection.CollectionChanged += FixupMOVIMENTOes1;
                    _mOVIMENTOes1 = newCollection;
                }
                return _mOVIMENTOes1;
            }
            set
            {
                if (!ReferenceEquals(_mOVIMENTOes1, value))
                {
                    var previousValue = _mOVIMENTOes1 as FixupCollection<MOVIMENTO>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMOVIMENTOes1;
                    }
                    _mOVIMENTOes1 = value;
                    var newValue = value as FixupCollection<MOVIMENTO>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMOVIMENTOes1;
                    }
                }
            }
        }
        private ICollection<MOVIMENTO> _mOVIMENTOes1;
    
        public virtual CIUDAD CIUDAD
        {
            get { return _cIUDAD; }
            set
            {
                if (!ReferenceEquals(_cIUDAD, value))
                {
                    var previousValue = _cIUDAD;
                    _cIUDAD = value;
                    FixupCIUDAD(previousValue);
                }
            }
        }
        private CIUDAD _cIUDAD;

        #endregion
        #region Association Fixup
    
        private void FixupCIUDAD(CIUDAD previousValue)
        {
            if (previousValue != null && previousValue.ALMACENs.Contains(this))
            {
                previousValue.ALMACENs.Remove(this);
            }
    
            if (CIUDAD != null)
            {
                if (!CIUDAD.ALMACENs.Contains(this))
                {
                    CIUDAD.ALMACENs.Add(this);
                }
                if (UNID_CIUDAD != CIUDAD.UNID_CIUDAD)
                {
                    UNID_CIUDAD = CIUDAD.UNID_CIUDAD;
                }
            }
        }
    
        private void FixupALMACEN_EMAIL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ALMACEN_EMAIL item in e.NewItems)
                {
                    item.ALMACEN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ALMACEN_EMAIL item in e.OldItems)
                {
                    if (ReferenceEquals(item.ALMACEN, this))
                    {
                        item.ALMACEN = null;
                    }
                }
            }
        }
    
        private void FixupMOVIMENTOes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MOVIMENTO item in e.NewItems)
                {
                    item.ALMACEN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOVIMENTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.ALMACEN, this))
                    {
                        item.ALMACEN = null;
                    }
                }
            }
        }
    
        private void FixupMOVIMENTOes1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MOVIMENTO item in e.NewItems)
                {
                    item.ALMACEN1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOVIMENTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.ALMACEN1, this))
                    {
                        item.ALMACEN1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
