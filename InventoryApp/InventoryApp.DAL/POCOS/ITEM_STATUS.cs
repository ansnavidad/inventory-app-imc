//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InventoryApp.DAL.POCOS
{
    public partial class ITEM_STATUS
    {
        #region Primitive Properties
    
        public virtual long UNID_ITEM_STATUS
        {
            get;
            set;
        }
    
        public virtual string ITEM_STATUS_NAME
        {
            get;
            set;
        }
    
        public virtual bool IS_ACTIVE
        {
            get;
            set;
        }
    
        public virtual Nullable<long> UNID_EMPRESA
        {
            get { return _uNID_EMPRESA; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_uNID_EMPRESA != value)
                    {
                        if (EMPRESA != null && EMPRESA.UNID_EMPRESA != value)
                        {
                            EMPRESA = null;
                        }
                        _uNID_EMPRESA = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<long> _uNID_EMPRESA;

        #endregion
        #region Navigation Properties
    
        public virtual EMPRESA EMPRESA
        {
            get { return _eMPRESA; }
            set
            {
                if (!ReferenceEquals(_eMPRESA, value))
                {
                    var previousValue = _eMPRESA;
                    _eMPRESA = value;
                    FixupEMPRESA(previousValue);
                }
            }
        }
        private EMPRESA _eMPRESA;
    
        public virtual ICollection<ITEM> ITEMs
        {
            get
            {
                if (_iTEMs == null)
                {
                    var newCollection = new FixupCollection<ITEM>();
                    newCollection.CollectionChanged += FixupITEMs;
                    _iTEMs = newCollection;
                }
                return _iTEMs;
            }
            set
            {
                if (!ReferenceEquals(_iTEMs, value))
                {
                    var previousValue = _iTEMs as FixupCollection<ITEM>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupITEMs;
                    }
                    _iTEMs = value;
                    var newValue = value as FixupCollection<ITEM>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupITEMs;
                    }
                }
            }
        }
        private ICollection<ITEM> _iTEMs;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupEMPRESA(EMPRESA previousValue)
        {
            if (previousValue != null && previousValue.ITEM_STATUS.Contains(this))
            {
                previousValue.ITEM_STATUS.Remove(this);
            }
    
            if (EMPRESA != null)
            {
                if (!EMPRESA.ITEM_STATUS.Contains(this))
                {
                    EMPRESA.ITEM_STATUS.Add(this);
                }
                if (UNID_EMPRESA != EMPRESA.UNID_EMPRESA)
                {
                    UNID_EMPRESA = EMPRESA.UNID_EMPRESA;
                }
            }
            else if (!_settingFK)
            {
                UNID_EMPRESA = null;
            }
        }
    
        private void FixupITEMs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ITEM item in e.NewItems)
                {
                    item.ITEM_STATUS = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM item in e.OldItems)
                {
                    if (ReferenceEquals(item.ITEM_STATUS, this))
                    {
                        item.ITEM_STATUS = null;
                    }
                }
            }
        }

        #endregion
    }
}
