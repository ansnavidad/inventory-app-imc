//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InventoryApp.DAL.POCOS
{
    public partial class MODELO
    {
        #region Primitive Properties
    
        public virtual long UNID_MODELO
        {
            get;
            set;
        }
    
        public virtual string MODELO_NAME
        {
            get;
            set;
        }
    
        public virtual bool IS_ACTIVE
        {
            get;
            set;
        }
    
        public virtual bool IS_MODIFIED
        {
            get;
            set;
        }
    
        public virtual long LAST_MODIFIED_DATE
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<MASTER_INVENTARIOS> MASTER_INVENTARIOS
        {
            get
            {
                if (_mASTER_INVENTARIOS == null)
                {
                    var newCollection = new FixupCollection<MASTER_INVENTARIOS>();
                    newCollection.CollectionChanged += FixupMASTER_INVENTARIOS;
                    _mASTER_INVENTARIOS = newCollection;
                }
                return _mASTER_INVENTARIOS;
            }
            set
            {
                if (!ReferenceEquals(_mASTER_INVENTARIOS, value))
                {
                    var previousValue = _mASTER_INVENTARIOS as FixupCollection<MASTER_INVENTARIOS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMASTER_INVENTARIOS;
                    }
                    _mASTER_INVENTARIOS = value;
                    var newValue = value as FixupCollection<MASTER_INVENTARIOS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMASTER_INVENTARIOS;
                    }
                }
            }
        }
        private ICollection<MASTER_INVENTARIOS> _mASTER_INVENTARIOS;
    
        public virtual ICollection<ARTICULO> ARTICULOes
        {
            get
            {
                if (_aRTICULOes == null)
                {
                    var newCollection = new FixupCollection<ARTICULO>();
                    newCollection.CollectionChanged += FixupARTICULOes;
                    _aRTICULOes = newCollection;
                }
                return _aRTICULOes;
            }
            set
            {
                if (!ReferenceEquals(_aRTICULOes, value))
                {
                    var previousValue = _aRTICULOes as FixupCollection<ARTICULO>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupARTICULOes;
                    }
                    _aRTICULOes = value;
                    var newValue = value as FixupCollection<ARTICULO>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupARTICULOes;
                    }
                }
            }
        }
        private ICollection<ARTICULO> _aRTICULOes;

        #endregion
        #region Association Fixup
    
        private void FixupMASTER_INVENTARIOS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MASTER_INVENTARIOS item in e.NewItems)
                {
                    item.MODELO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MASTER_INVENTARIOS item in e.OldItems)
                {
                    if (ReferenceEquals(item.MODELO, this))
                    {
                        item.MODELO = null;
                    }
                }
            }
        }
    
        private void FixupARTICULOes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ARTICULO item in e.NewItems)
                {
                    item.MODELO = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ARTICULO item in e.OldItems)
                {
                    if (ReferenceEquals(item.MODELO, this))
                    {
                        item.MODELO = null;
                    }
                }
            }
        }

        #endregion
    }
}
