//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InventoryApp.DAL.POCOS
{
    public partial class CIUDAD
    {
        #region Primitive Properties
    
        public virtual long UNID_CIUDAD
        {
            get;
            set;
        }
    
        public virtual string CIUDAD1
        {
            get;
            set;
        }
    
        public virtual string ISO
        {
            get;
            set;
        }
    
        public virtual bool IS_ACTIVE
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<PROVEEDOR> PROVEEDORs
        {
            get
            {
                if (_pROVEEDORs == null)
                {
                    var newCollection = new FixupCollection<PROVEEDOR>();
                    newCollection.CollectionChanged += FixupPROVEEDORs;
                    _pROVEEDORs = newCollection;
                }
                return _pROVEEDORs;
            }
            set
            {
                if (!ReferenceEquals(_pROVEEDORs, value))
                {
                    var previousValue = _pROVEEDORs as FixupCollection<PROVEEDOR>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPROVEEDORs;
                    }
                    _pROVEEDORs = value;
                    var newValue = value as FixupCollection<PROVEEDOR>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPROVEEDORs;
                    }
                }
            }
        }
        private ICollection<PROVEEDOR> _pROVEEDORs;
    
        public virtual ICollection<ALMACEN> ALMACENs
        {
            get
            {
                if (_aLMACENs == null)
                {
                    var newCollection = new FixupCollection<ALMACEN>();
                    newCollection.CollectionChanged += FixupALMACENs;
                    _aLMACENs = newCollection;
                }
                return _aLMACENs;
            }
            set
            {
                if (!ReferenceEquals(_aLMACENs, value))
                {
                    var previousValue = _aLMACENs as FixupCollection<ALMACEN>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupALMACENs;
                    }
                    _aLMACENs = value;
                    var newValue = value as FixupCollection<ALMACEN>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupALMACENs;
                    }
                }
            }
        }
        private ICollection<ALMACEN> _aLMACENs;

        #endregion
        #region Association Fixup
    
        private void FixupPROVEEDORs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PROVEEDOR item in e.NewItems)
                {
                    item.CIUDAD = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PROVEEDOR item in e.OldItems)
                {
                    if (ReferenceEquals(item.CIUDAD, this))
                    {
                        item.CIUDAD = null;
                    }
                }
            }
        }
    
        private void FixupALMACENs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ALMACEN item in e.NewItems)
                {
                    item.CIUDAD = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ALMACEN item in e.OldItems)
                {
                    if (ReferenceEquals(item.CIUDAD, this))
                    {
                        item.CIUDAD = null;
                    }
                }
            }
        }

        #endregion
    }
}
