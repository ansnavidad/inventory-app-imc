//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace InventoryApp.DAL.POCOS
{
    public partial class PROVEEDOR
    {
        #region Primitive Properties
    
        public virtual long UNID_PROVEEDOR
        {
            get;
            set;
        }
    
        public virtual string PROVEEDOR_NAME
        {
            get;
            set;
        }
    
        public virtual string CONTACTO
        {
            get;
            set;
        }
    
        public virtual string TEL1
        {
            get;
            set;
        }
    
        public virtual string TEL2
        {
            get;
            set;
        }
    
        public virtual string MAIL
        {
            get;
            set;
        }
    
        public virtual string CALLE
        {
            get;
            set;
        }
    
        public virtual long UNID_PAIS
        {
            get;
            set;
        }
    
        public virtual long UNID_CIUDAD
        {
            get;
            set;
        }
    
        public virtual string CODIGO_POSTAL
        {
            get;
            set;
        }
    
        public virtual string RFC
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<PROVEEDOR_CUENTA> PROVEEDOR_CUENTA
        {
            get
            {
                if (_pROVEEDOR_CUENTA == null)
                {
                    var newCollection = new FixupCollection<PROVEEDOR_CUENTA>();
                    newCollection.CollectionChanged += FixupPROVEEDOR_CUENTA;
                    _pROVEEDOR_CUENTA = newCollection;
                }
                return _pROVEEDOR_CUENTA;
            }
            set
            {
                if (!ReferenceEquals(_pROVEEDOR_CUENTA, value))
                {
                    var previousValue = _pROVEEDOR_CUENTA as FixupCollection<PROVEEDOR_CUENTA>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPROVEEDOR_CUENTA;
                    }
                    _pROVEEDOR_CUENTA = value;
                    var newValue = value as FixupCollection<PROVEEDOR_CUENTA>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPROVEEDOR_CUENTA;
                    }
                }
            }
        }
        private ICollection<PROVEEDOR_CUENTA> _pROVEEDOR_CUENTA;
    
        public virtual ICollection<MOVIMENTO> MOVIMENTOes
        {
            get
            {
                if (_mOVIMENTOes == null)
                {
                    var newCollection = new FixupCollection<MOVIMENTO>();
                    newCollection.CollectionChanged += FixupMOVIMENTOes;
                    _mOVIMENTOes = newCollection;
                }
                return _mOVIMENTOes;
            }
            set
            {
                if (!ReferenceEquals(_mOVIMENTOes, value))
                {
                    var previousValue = _mOVIMENTOes as FixupCollection<MOVIMENTO>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMOVIMENTOes;
                    }
                    _mOVIMENTOes = value;
                    var newValue = value as FixupCollection<MOVIMENTO>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMOVIMENTOes;
                    }
                }
            }
        }
        private ICollection<MOVIMENTO> _mOVIMENTOes;
    
        public virtual ICollection<FACTURA> FACTURAs
        {
            get
            {
                if (_fACTURAs == null)
                {
                    var newCollection = new FixupCollection<FACTURA>();
                    newCollection.CollectionChanged += FixupFACTURAs;
                    _fACTURAs = newCollection;
                }
                return _fACTURAs;
            }
            set
            {
                if (!ReferenceEquals(_fACTURAs, value))
                {
                    var previousValue = _fACTURAs as FixupCollection<FACTURA>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFACTURAs;
                    }
                    _fACTURAs = value;
                    var newValue = value as FixupCollection<FACTURA>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFACTURAs;
                    }
                }
            }
        }
        private ICollection<FACTURA> _fACTURAs;
    
        public virtual ICollection<CATEGORIA> CATEGORIAs
        {
            get
            {
                if (_cATEGORIAs == null)
                {
                    var newCollection = new FixupCollection<CATEGORIA>();
                    newCollection.CollectionChanged += FixupCATEGORIAs;
                    _cATEGORIAs = newCollection;
                }
                return _cATEGORIAs;
            }
            set
            {
                if (!ReferenceEquals(_cATEGORIAs, value))
                {
                    var previousValue = _cATEGORIAs as FixupCollection<CATEGORIA>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCATEGORIAs;
                    }
                    _cATEGORIAs = value;
                    var newValue = value as FixupCollection<CATEGORIA>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCATEGORIAs;
                    }
                }
            }
        }
        private ICollection<CATEGORIA> _cATEGORIAs;

        #endregion
        #region Association Fixup
    
        private void FixupPROVEEDOR_CUENTA(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PROVEEDOR_CUENTA item in e.NewItems)
                {
                    item.PROVEEDOR = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PROVEEDOR_CUENTA item in e.OldItems)
                {
                    if (ReferenceEquals(item.PROVEEDOR, this))
                    {
                        item.PROVEEDOR = null;
                    }
                }
            }
        }
    
        private void FixupMOVIMENTOes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MOVIMENTO item in e.NewItems)
                {
                    item.PROVEEDOR = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOVIMENTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.PROVEEDOR, this))
                    {
                        item.PROVEEDOR = null;
                    }
                }
            }
        }
    
        private void FixupFACTURAs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FACTURA item in e.NewItems)
                {
                    item.PROVEEDOR = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FACTURA item in e.OldItems)
                {
                    if (ReferenceEquals(item.PROVEEDOR, this))
                    {
                        item.PROVEEDOR = null;
                    }
                }
            }
        }
    
        private void FixupCATEGORIAs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CATEGORIA item in e.NewItems)
                {
                    if (!item.PROVEEDORs.Contains(this))
                    {
                        item.PROVEEDORs.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CATEGORIA item in e.OldItems)
                {
                    if (item.PROVEEDORs.Contains(this))
                    {
                        item.PROVEEDORs.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
